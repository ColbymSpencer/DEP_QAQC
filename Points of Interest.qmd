---
title: "POI Amenities and Experiences"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r setup}
#| include: false

# load libraries
library(tidyverse)
library(readxl)
library(xlsx)
library(janitor)
library(textclean)

# import data
points_of_interest <- sf::st_read('C:/Users/Spencer_C/Desktop/GDB Copy/FloridaStateParksGIS.gdb', layer = 'POI_Statewide') 
amenities_experiences <- read_excel("C:/Users/Spencer_C/Documents/Web Scrape/feature_table_long.xlsx")
key <- read_excel("Key.xlsx")
```

The imported data must be cleaned - remove or account for any data that is unexpected/erroneous and reformat the data into something useful. 

The names of columns are converted to lowercase and any spaces or special characters are removed/replaced.

The data imported from excel files contains relics, invisible characters (usually spaces, tabs, newlines, etc) that must be accounted for to compare values between tables. 

Because we are only testing if an amenity or experience is listed in the park, we do not need to have multiple coppies of the same point of interest - for example a park may have a dozen picnic pavilions, but only one is needed to say the park has picnic pavilions as an amenity. 
```{r clean}
#| include: false

poi <- points_of_interest |>
  as_tibble() |>
  clean_names() |>
  mutate(poi_classification = replace_non_ascii(str_trim(poi_classification)),
         site_name = replace_non_ascii(str_trim(site_name))) |> #clean/ remove invisible characters
  distinct(site_name, poi_classification) |> # only one entry of each classification per park
  rename('park' = site_name)
rm(points_of_interest)

ae <- amenities_experiences |>
  clean_names() |>
  filter(category != 'park_type') |>
  select(park, 'web_classification' = filter)
rm(amenities_experiences)

key <- key |>
  select('poi_classification' = 1, 'web_classification' = 2) |>
  mutate(poi_classification = replace_non_ascii(str_trim(poi_classification)),
         web_classification = replace_non_ascii(str_trim(web_classification))) #clean/ remove invisible characters

unmatched <- key |> # unmatched poi classifications
  filter(is.na(web_classification)) |>
  pull(poi_classification)
```

split trails is a tidy dataframe with observations of trail types in the points of interest dataframe. Some of the points of interest contained multiple types of trail in each poi_classification. It is rejoined to the poi dataframe after the original has been filtered to exclude all entries broken down.

```{r tidy_poi}
#| include: false

# rows with multiple trail types
multi_trails <- poi |>
  filter(grepl('^(?!.*Camp).*(Hiking|Biking|Equestrian)' , poi_classification, perl = TRUE)) 

# tidy multi_trails df
split_trails <- multi_trails |>
  separate_longer_delim(poi_classification, delim = "/") |>
  mutate(poi_classification = str_replace(poi_classification, ' Trail','')) |>
  mutate(poi_classification = paste(poi_classification, 'Trail')) |>
  distinct(park, poi_classification)

tidy_poi <- poi |>
  anti_join(multi_trails) |>
  rbind(split_trails)

rm(multi_trails)
rm(split_trails)
```

```{r tidy_key}
#| include: false


tidy_key <- key |>
  filter(!is.na(web_classification)) |>
  separate_longer_delim(web_classification, delim = " | ")

```

## What amenities and experiences have a POI but are not on the parks webpage?

The table generated by the code below can be read as:

> 'Our POI layer for `Park` has `POI Classification` but the webpage for `Park` does not have `Web Classification` listed'

This can be okay when there is a square-rectangle scenario but may indicate an error in one dataset or both.

-   like when there is a biking trail but the park webpage does not have 'mountain biking' as an amenity or experience. Not all biking trails are mountain biking.

-   This can also indicate an error, like when the park has a POI for picnic pavilions but the park's webpage does not list picnic pavilions as an amenity or experience.

```{r}
gdb_not_web <- tidy_poi |>  
  filter(!poi_classification %in% unmatched) |>
  left_join(tidy_key, by = join_by(poi_classification)) |>
  anti_join(ae, by = join_by(park, web_classification)) |>
  arrange(park) |>
  select('Park' = park, 'POI Layer Says We Have' = poi_classification, 'But Webpage Doesnt Have' = web_classification)
```

```{r write_to_excel}
write.xlsx(gdb_not_web, file = "POI Discrepancies.xlsx",
           sheetName="GDB Not Webpage")
```

## What amenities and experiences are listed online but are not in the POI layer?

The table generated by the code below can be read as:

> 'Our webpage for `Park` has `Web Classification` but the POI layer for `Park` does not have a feature with `POI Classification`'

```{r}
web_not_gdb <- ae |>
  left_join(tidy_key,by = join_by(web_classification)) |>
  anti_join(tidy_poi, join_by(park, poi_classification)) |> 
  arrange(park) |>
  select('Park' = park, 'Webpage Says We Have' = web_classification, 'But POI Layer Doesnt Have' = poi_classification)

```

Write the resulting table to excel

```{r write_to_excel}
write.xlsx(web_not_gdb, file = "POI Discrepancies.xlsx",
           sheetName="Webpage Not GDB", append = TRUE)
```

## Troubleshooting

check: tidy poi only eliminated poi classifications with multiple values per row

```{r}
#| include: false
anti_join(poi, tidy_poi) |>
  view()
```

why is the left join not matching? Relics in the imported data from excel

```{r}
#| include: false
poi |>
  select(site_name, poi_classification) |>
  as_tibble() |>
  filter(poi_classification == "Historic Site")

# key has problems
key |>
  as_tibble() |>
  filter(poi_classification == "Historic Site")

print(sort(unique(key$poi_classification))[36])
sort(unique(key$poi_classification))[36] == "Historic Site" #false
"Historic Site" == "Historic Site"

#same data types and classes
class(sort(unique(key$poi_classification))[36])
class("Historic Site")
typeof(sort(unique(key$poi_classification))[36])
typeof("Historic Site")

# are there hidden characters in the table
hsite <- class(sort(unique(key$poi_classification))[36])
hsite == 'Historic Site' #false
str_remove_all(hsite, "[^A-z|0-9|[:punct:]|\\s]")
hsite == 'Historic Site' #false

library(textclean)
key |>
  mutate('new_poi' = replace_non_ascii(str_trim(poi_classification))) |>
  filter(new_poi == 'Historic Site')
```
