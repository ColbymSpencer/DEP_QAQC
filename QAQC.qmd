---
title: "QAQC"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r setup libraries and functions}
# import libraries
library(tidyverse)
library(sf)
library(janitor)

# create custom functions
skimmer <- function(layer, n = 50) {
  sapply(layer, function(x) {
    uniq <- unique(x)
    if (length(uniq) < n)
      uniq_values = sort(uniq)
    else
      length(uniq)
  })
}
```


```{r setup import layers}
##### layers from duplicate gdb #####

# walkways <- sf::st_read('c:/users/Spencer_C/Desktop/FSP_20240425.gdb', layer = 'Walkways_Statewide') |>
#   as_tibble()
# trails <- sf::st_read('c:/users/Spencer_C/Desktop/FSP_20240425.gdb', layer = 'Trails_Statewide') |>
#   as_tibble()
# roads <- sf::st_read('c:/users/Spencer_C/Desktop/FSP_20240425.gdb', layer = 'Roads_Statewide') |>
#   as_tibble()

# trails <- sf::st_read('c:/users/Spencer_C/Desktop/FSP_Copy_202403.gdb', layer = 'Trails_Statewide')
# bridges <- sf::st_read('c:/users/Spencer_C/Desktop/FSP_Copy_202403.gdb', layer = 'Bridges_Statewide')
# structures <- sf::st_read('c:/users/Spencer_C/Desktop/FSP_Copy_202403.gdb', layer = 'Structures_Statewide')
# park_entrances <- sf::st_read('c:/users/Spencer_C/Desktop/FSP_Copy_202403.gdb', layer = 'Park_Entrances_Statewide')

#### special project layers ####
# ap <- sf::st_read('c:/users/Spencer_C/Desktop/FSP_Copy_202403.gdb', layer = 'archeology_site_polygons') |>
#   as_tibble()
natcom_updates <- sf::st_read('C:/Users/Spencer_C/Documents/Misc/Grrenway_NatCom_20240404.gdb/MHCCFG_FPL_Parcels_NC_Polygons_v2.gdb', layer = 'MHCCFG_FPL_Parcels_Current_NC_Polygons_2023_v2')

##### layers from source gdb #####
# structures <- sf::st_read('//floridadep/data/drp/gis/statewidecoverages/FloridaStateParksGIS.gdb', layer = 'Structures_Statewide')

trails <- sf::st_read('//floridadep/data/drp/gis/statewidecoverages/FloridaStateParksGIS.gdb', layer = 'Trails_Statewide')
roads <- sf::st_read('//floridadep/data/drp/gis/statewidecoverages/FloridaStateParksGIS.gdb', layer = 'Roads_Statewide') |>
  as_tibble()
# walkways <- sf::st_read('//floridadep/data/drp/gis/statewidecoverages/FloridaStateParksGIS.gdb', layer = 'Walkways_Statewide')
# natcoms <- sf::st_read('//floridadep/data/drp/gis/statewidecoverages/FloridaStateParksGIS.gdb', layer = 'Natural_Communities_Statewide')

natcoms_MHC <- sf::st_read('C:/Users/Spencer_C/Documents/ArcGIS/Projects/MyProject/MyProject.gdb', layer = 'updated_natcoms_MHC')
sort(unique(natcoms_MHC$EC_TYPE))

natcoms <- sf::st_read('C:/Users/Spencer_C/Desktop/FSP_20240425.gdb', layer = 'Natural_Communities_Statewide') |>
  janitor::clean_names() |>
  as_tibble()

sort(unique(natcoms_MHC$EC_TYPE))
```

```{r clean}
walkways <- walkways |>
  clean_names() |>
  as_tibble()

trails <- trails |>
  clean_names() |>
  as_tibble()
```

```{r explore}
# walkways
skimmer(walkways, 50)

# trails
skimmer(trails, 100)

# bridges
skimmer(bridges, 30)

# structures
skimmer(structures, 40)

# natcoms
natcoms |>
  count(fire_dependent, fire_influenced)
```

```{r make key for combininig trails and walkways fields}
data.frame(tr = sort(names(trails)), wlk = c(sort(names(walkways)), NA, NA)) |>
  view()
  # writexl::write_xlsx('c:/users/Spencer_C/downloads/field_matching.xlsx')

unique(walkways$TYPE)
```

```{r explore archeology}
skimmer(ap, 81)

ap |>
  count(CLASSIFY, sort = TRUE)

ap |>
  select(contains('CULTURE')) |>
  pivot_longer(contains('CULTURE'), names_to = 'culture_group', values_to = 'culture_period') |>
  select(culture_period) |>
  filter(culture_period != ' ') |>
  distinct() |>
  arrange(culture_period) |>
  writexl::write_xlsx('c:/users/Spencer_C/Downloads/cultural_periods_domain.xlsx')

ap |>
  select(contains('SITETYPE')) |>
  pivot_longer(contains('SITETYPE'), names_to = 'sitetype_group', values_to = 'site_type') |>
  select(site_type) |>
  filter(site_type != ' ') |>
  distinct() |>
  arrange(site_type) |>
  # view()
  writexl::write_xlsx('c:/users/Spencer_C/Downloads/site_type_domain.xlsx')
```

```{r compare natcom request to existing}
natcom_updates <- natcom_updates |>
  mutate(FNAI_NC = str_to_title(FNAI_NC))


names(natcoms)
names(natcom_updates)
unique(natcoms$EC_TYPE)
unique(natcom_updates$FNAI_NC)[!unique(natcom_updates$FNAI_NC) %in% unique(natcoms$EC_TYPE)]

unique(natcoms$EC_TYPE)[grepl('Clear',unique(natcoms$EC_TYPE))]
```

```{r}
trails |>
  as_tibble() |>
  count(NAME, sort = TRUE)
```

```{r real natcoms}
natcoms <- sf::st_read('//floridadep/data/drp/gis/statewidecoverages/FloridaStateParksGIS.gdb', layer = 'Natural_Communities_Statewide') |>
  as_tibble()

natcoms |>
  count(SITE_NAME, DFC_TYPE, DFC_CODE, sort = TRUE)

natcoms |>
  count(SITE_NAME,EC_CODE, DFC_TYPE, DFC_CODE, sort = TRUE) |>
  filter(DFC_CODE == 'UNC') |>
  view()

natcoms |>
  filter(SITE_NAME == 'Marjorie Harris Carr Cross Florida Greenways State Recreation and Conservation Area') |>
  distinct(EC_TYPE) |>
  arrange(-desc(EC_TYPE)) |>
  print(n = Inf)
```

```{r explore roads}
roads <- sf::st_read('//floridadep/data/drp/gis/statewidecoverages/FloridaStateParksGIS.gdb', layer = 'Roads_Statewide') |>
  as_tibble()

skimmer(roads)
```

